function [ ...
err ...
] = ...
fcn_MapGen_ugvSensorErrorBubble( ...
Polytopes, ...
Heading_Angle, ...
Bubble_Resolution, ...
varargin...
)
% fcn_MapGen_ugvSensorErrorBubble
%  This function calls fcn_MapGen_ugvSensorError function and outputs a
%  'bubble' of uncertainty. The size of the bubble is determined by the
%  uncertainty values generated by fcn_MapGen_ugvSensorError.
% 
%  This function will have to be called for every map that is generated,
%  but it will generate error bubbles for each polytope within a given map.
% 
% Notes:
%     - Bubble is ellipitcal in nature. However, the x and y components
%     (the a and b values for elliptical geometry) are very similar. They
%     could eventually be simplified to one value to reduce computations.
% 
% Assumptions:
%     - flat terrain
%     - rake scanning across y axis (or y-z plane but not considering
%     elevation or angle), path of laser is parallel to y-x plane (flat)
%     - assumes that scanning frequency (scanning paths completed per second)
%     is much greater than vehicle velocity (essentially, the vehicle moves a
%     negligible distance between each return of the laser within a scan)
%     - ignoring other error sources: time offset (scanner to clock),
%     calibration offset or misalignment between sensors, possible errors in
%     the transformation (post-processing)in the local coordinate system, 
%     number, distribution, and distance of GPS reference stations, quality
%     of the GPS/INS postprocessing, correction of the relative errors
%     through block adjustment of the scan strips, etc.
% 
% 
% FORMAT:
% 
%    [ ...
%    err ...
%    ] = ...
%    fcn_MapGen_ugvSensorErrorBubble( ...
%    Polytopes, ...
%    Heading_Angle, ...
%    Bubble_Resolution, ...
%    (fig_num) ...
%    )
% 
% INPUTS:
% 
%     Polytopes: an individual structure or structure array of 'polytopes' 
%     type that stores the polytopes to be evaluated
% 
%     Heading_Angle: is a singular value in degrees of the robot's heading 
%     angle
% 
%     Bubble_Resolution: is a singular value (unitless)
% 
%     (optional inputs)
%
%     fig_num: any number that acts as a figure number output, causing a 
%     figure to be drawn showing results.
% 
% 
% OUTPUTS:
% 
%     err: Error result
% 
% 
% DEPENDENCIES:
% 
%     fcn_MapGen_checkInputsToFunctions
%     fcn_MapGen_ugvSensorError
% 
% 
% EXAMPLES:
% 
% See the script: script_test_fcn_MapGen_ugvSensorErrorBubble
% for a full test suite.
% 
% This function was written on 2021_07_08 by Sean Brennan
% Questions or comments? contact sbrennan@psu.edu

% 
% REVISION HISTORY:
% 
% Nick Carder 3/9/21
%     v1  - for specific use in scripts, intended for handling vectors for use
%     in plotting
%         - equations based on simple 2D trigonometry
%         - beginning to explicitly apply assumptions for 2D flat terrain
%     v2  - for use in loops for each polytope
%         - works with err_ugv_v3
%         - adds in err as a struct
%     v3  - meant to be more user-friendly with Seth's code
%         - accepts structures as delivered by Seth's code (polytopes)
%         - omits calculation of 'error squares' because they are redundant
%         - error bubbles are included in output rather than plots
%         - omits some framework to help accept polytopes as this code is 
%           assumed to work within a script
% 2021_07_08 by Sean Brennan
% -- rebased function for MapGen library

% 
% TO DO:
% 
% -- fill in to-do items here.

%% Debugging and Input checks
flag_check_inputs = 1; % Set equal to 1 to check the input arguments 
flag_do_plot = 0;      % Set equal to 1 for plotting 
flag_do_debug = 0;     % Set equal to 1 for debugging 

if flag_do_debug
    fig_for_debug = 73;
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
end 

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


if 1 == flag_check_inputs

    % Are there the right number of inputs?
    if nargin < 3 || nargin > 4
        error('Incorrect number of input arguments')
    end

    % Check the Polytopes input, make sure it is 'polytopes' type
    fcn_MapGen_checkInputsToFunctions(...
        Polytopes, 'polytopes');
 
    % Check the Heading_Angle input, make sure it is '1column_of_numbers' type
    fcn_MapGen_checkInputsToFunctions(...
        Heading_Angle, '1column_of_numbers',[1]);

    % Check the Bubble_Resolution input, make sure it is '1column_of_numbers' type
    fcn_MapGen_checkInputsToFunctions(...
        Bubble_Resolution, '1column_of_numbers',[1]);

end

% Does user want to show the plots?
if  4== nargin
    fig_num = varargin{end};
    flag_do_plot = 1;
else
    if flag_do_debug
        fig = figure;
        fig_for_debug = fig.Number;
        flag_do_plot = 1;
    end
end

%% Start of main code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%See: http://patorjk.com/software/taag/#p=display&f=Big&t=Main
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง

%% Generating Error Values

for ii=1:length(Polytopes)
    %looping through all polytopes
    
    %variable re-assignment
    x =  Polytopes(ii).xv;
    y =  Polytopes(ii).yv;

    %kappa is our heading angle for each full scan of the sensor (assumed
    %to be lidar in this case)
    %it should be the same (or have negligible change) within the time
    %period it takes to scan over the field of view so here it is
    %pre-allocated to be the same fore each polytope
    kappa=Heading_Angle*ones(size(x));
    
    %bubble resolution refers to the amount of new points that are
    %generated for each vertex of a polytope
    %this generates N points in a circle around each vertex at a radius
    %determined by the uncertainty values of the sensor
    %these points are then used in convhull to make the error bubble
    %N=4 is suggested to be the minimum
    %N=6 is suggested to be a maximum because the time it takes to
    %gernerate them will compound with each loop
    N=Bubble_Resolution;

    %% Determining Range and Distance
    % from polytope vertices

    %R=sqrt(x.^2+y.^2);  % perceived distance
    R = Polytopes(ii).distances;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %R may need to be updated to acknowledge sensor location in x,y grid %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % not sure if Polytopes.distances updates with that information

    % beta is our scanning angle for each laser pulse
    % there is normally a uniform spacing of laser points, but this assumes
    % that we only emit lasers directly at the vertices of polytopes
    % heading angle is subtracted out so scanning angle is always respective to
    % where the vehicle is pointed
    beta=rad2deg(atan(y./x))-kappa; 


    %% Generating Error Values
    % the err_ugv function is called in this section to generate the
    % magnitude uncertainty values for our sensor
    
    % [DX_err, DY_err, DZ_err] = ...
        % err_ugv_v3 ([scaning_results], [position_uncertainty], [angular_uncertainty],[laser_uncertainty])

    %or in more detail
    % [DX_err, DY_err, DZ_err] = ...
        % err_ugv_v3 ([R, beta, kappa], [dx0, dy0, dz0], [domega, dpsi, dkappa],[dR, dbeta])  

    % Sensor error values from Baltsavias paper
    [err(ii).x , err(ii).y ] = fcn_MapGen_ugvSensorError({R, beta, kappa}, ... 
        {0.08, 0.08, 0.08}, {0.03, 0.03, 0.04}, {0.02, -0.05});
    
    %initialization for nested loop
    R_len = length(R);
    err(ii).circ_x = zeros(1,R_len*N);
    err(ii).circ_y = zeros(1,R_len*N);
    %kk is a pre-allocating the points along a circle where the bubble
    %points will be generated
    kk=linspace(2*pi/N,2*pi,N);

    %creating the error 'bubbles'
    for jj=1:R_len
        %loop through each vertex of the polygon for this ii loop (this
        %polytope)
        %for each vertex on a polytope, there will be N times as many
        %points in a bubble

        err(ii).circ_x (1, 1+N*(jj-1):N*jj) = x(jj)+err(ii).x(jj)*cos(kk);
        err(ii).circ_y (1, 1+N*(jj-1):N*jj) = y(jj)+err(ii).y(jj)*sin(kk);

    end

    err(ii).bubble = convhull(err(ii).circ_x, err(ii).circ_y);

end % Ends for loop

% 

%ยง
%% Plot the results (for debugging)?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



if flag_do_plot
    % Nothing to plot here
end % Ends the flag_do_plot if statement    

if flag_do_debug
    fprintf(1,'ENDING function: %s, in file: %s\n\n',st(1).name,st(1).file);
end


end % Ends the function

%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _                 
%  |  ____|              | | (_)                
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___ 
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%                                               
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%ยง



