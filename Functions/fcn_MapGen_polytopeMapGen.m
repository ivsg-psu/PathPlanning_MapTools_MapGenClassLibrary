function [map_polytopes,all_pts,mu_rad_final,sigma_rad_final] = ...
    fcn_MapGen_polytopeMapGen(...
    halton_range,...
    bounding_box,...
    des_radius,sigma_radius,min_rad,shrink_seed,varargin)
% fcn_MapGen_polytopeMapGen creates a polytope map generated by a Halton
% set polytopes, with given desired radius and standard deviation in
% radius.
%
% FORMAT:
%
% [map_polytopes,all_pts,mu_rad_final,sigma_rad_final] = ...
%     fcn_MapGen_polytopeMapGen(...
%     halton_range,...
%     bounding_box,...
%     des_radius,sigma_radius,min_rad,shrink_seed)
%
% INPUTS:
%
%    halton_range: 1 x 2 vector of integers specifying the [low high] range
%    of Halton points to use to generate the tiling
%
%    bounding_box: a 2 x 2 matrix of [xlow ylow; xhigh yhigh] in which all
%    the polytopes must exist, e.g. the corner coordinates of the
%    axis-aligned bounding box.
%
%    des_radius:
%
%    sigma_radius:
%
%    min_rad:
%
%    shrink_seed:
%
%    (OPTIONAL INPUTS)
%
%     fig_num: a figure number to plot results.
%
% OUTPUTS:
%
%     map_polytopes: an N x 2 matrix representing the [x y] vector of starting
%     points of the "walls", where N is # of wall segments
%
%     all_pts: an N x 2 matrix representing the [x y] vector of ending
%     points of the "walls", where N is # of wall segments
%
%     mu_rad_final:
%
%     sigma_rad_final
%
% DEPENDENCIES:
%
%      fcn_MapGen_checkInputsToFunctions
%      fcn_MapGen_haltonVoronoiTiling
%      fcn_MapGen_polytopeCropEdges
%      fcn_MapGen_polytopesShrinkToRadius
%      fcn_MapGen_plotPolytopes
%
% EXAMPLES:
%
% See the script: script_test_fcn_MapGen_polytopeMapGen
% for a full test suite.
%
% This function was written on 2020_06_06 by S. Brennan by editing
% fcn_basic_polytope_map_generation written by S. Tau.
% Questions or comments? sbrennan@psu.edu

% REVISION HISTORY:
% 2021_06_06
% -- first written by S. Brennan.

%% Debugging and Input checks
% set an environment variable on your machine with the getenv function...
% in the Matlab console.  Char array of '1' will be true and '0' will be false.
flag_check_inputs = getenv('ENV_FLAG_CHECK_INPUTS');  % '1' will check input args
flag_do_plot = getenv('ENV_FLAG_DO_PLOT'); % '1' will make plots
flag_do_debug = getenv('ENV_FLAG_DO_DEBUG'); % '1' will enable debugging

% if the char array has length 0, assume the env var isn't set and default to...
% dipslaying more information rather than potentially hiding an issue
if length(flag_check_inputs) = 0
    flag_check_inputs = '1';
end
if length(flag_do_plot) = 0
    flag_do_plot = '1';
end
if length(flag_do_debug) = 0
    flag_do_debug = '1';
end

% convert flag from char string to logical
flag_check_inputs = flag_check_inputs == '1';
flag_do_plot = flag_do_plot == '1';
flag_do_debug = flag_do_debug == '1';

if flag_do_debug
    fig_for_debug = 9993;
    st = dbstack; %#ok<*UNRCH>
    fprintf(1,'STARTING function: %s, in file: %s\n',st(1).name,st(1).file);
end

%% check input arguments?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _
%  |_   _|                 | |
%    | |  _ __  _ __  _   _| |_ ___
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |
%              |_|
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if flag_check_inputs
    % Are there the right number of inputs?
    if nargin < 6 || nargin > 7
        error('Incorrect number of input arguments')
    end

    % Check the halton_range input
    fcn_MapGen_checkInputsToFunctions(...
        halton_range, '2column_of_integers');

    % Check the bounding_box input
    fcn_MapGen_checkInputsToFunctions(...
        bounding_box, '2column_of_numbers',2);

end


% Does user want to show the plots?
if 7 == nargin
    fig_num = varargin{end};
    figure(fig_num);
    flag_do_plot = 1;
else
    if flag_do_debug
        fig = figure;
        fig_for_debug = fig.Number;
        flag_do_plot = 1;
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _
%  |  \/  |     (_)
%  | \  / | __ _ _ _ __
%  | |\/| |/ _` | | '_ \
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% generate Voronoi tiling from Halton points
tiled_polytopes = fcn_MapGen_haltonVoronoiTiling(halton_range);

% remove the edge polytopes that extend past the high and low points
trimmed_polytopes = ...
    fcn_MapGen_polytopeCropEdges(tiled_polytopes,bounding_box);

% shink the polytopes so that they are no longer tiled
rng(shrink_seed) % set the random number generator with the shrink seed
[map_polytopes,mu_rad_final,sigma_rad_final] = ...
    fcn_MapGen_polytopesShrinkToRadius(trimmed_polytopes,...
    des_radius,sigma_radius,min_rad);

% gather data on all the points by looping through the polytopes
point_tot = length([map_polytopes.xv]); % total number of vertices in the polytopes
beg_end = zeros(1,point_tot); % is the point the start/end of an obstacle
curpt = 0;
for poly = 1:size(map_polytopes,2) % check each polytope
    verts = length(map_polytopes(poly).xv);
    map_polytopes(poly).obs_id = ones(1,verts)*poly; % obs_id is the same for every vertex on a single polytope
    beg_end([curpt+1,curpt+verts]) = 1; % the first and last vertices are marked with 1 and all others are 0
    curpt = curpt+verts;
end
obs_id = [map_polytopes.obs_id];
all_pts = [[map_polytopes.xv];[map_polytopes.yv];1:point_tot;obs_id;beg_end]'; % all points [x y point_id obs_id beg_end]

%% Plot results?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _
%  |  __ \     | |
%  | |  | | ___| |__  _   _  __ _
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if flag_do_plot
    figure(fig_num);
    hold on

    % plot the tiled_polytopes
    fcn_MapGen_plotPolytopes(tiled_polytopes,fig_num,'b',2,[0 1 0 1]);

    % plot the trimmed_polytopes
    fcn_MapGen_plotPolytopes(trimmed_polytopes,fig_num,'g',2,[0 1 0 1]);

    % plot the map_polytopes
    fcn_MapGen_plotPolytopes(map_polytopes,fig_num,'r',2,[0 1 0 1]);

end

if flag_do_debug
    fprintf(1,'ENDING function: %s, in file: %s\n\n',st(1).name,st(1).file);
end


end % Ends the function

