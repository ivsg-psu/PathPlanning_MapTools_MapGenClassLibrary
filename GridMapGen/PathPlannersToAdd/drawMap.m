function varargout=drawMap(varargin)
% drawMap lunch an application to create a simulated obstacles & lines map
% and also enables you to specify a start point and different goal points.
% Chosing obstacles or lines button and clicking on the map enables you to 
% draw the desired shape of each one. To erase just click on the erase 
% button and then on the parts of the map you want to erase.
%
%       [simulatedObstaclesMap,simulatedLinesMap]=drawMap runs the GUI 
%       with a plot area of 100-by-100 as default value and enables you to 
%       draw the obstacles map and the lines map in the same plot area.
%       When the OK button is pressed it returns the 2 separted matrix 
%       with the obstalces and lines you have drawn.
%
%       [simulatedObstaclesMap]=drawMap(N,M) runs the GUI with a plot
%       area of N-by-M and enables you to draw only obstalces in the plot
%       area. When the OK button is pressed it returns a matrix of 1's for
%       obstacles and 0's for non obstacles.
%
%       [simulatedObstaclesMap,simulatedLinesMap,startPoint,goalPoints]=drawMap runs the GUI
%       with a plot area of 100-by-100 and apart of enable you to draw
%       obstacles and lines, it enables you to specify a start point and
%       several goal points. When the OK button is pressend it returns 2
%       separeted matrix and the start point and goal points in index
%       format.
%
%   Example:
%
%   [simulated_obstacles_map,simulated_lines_map,start_point,goal_points]=drawMap
%

%% Check input arguments
if nargin>2 || nargin==1
    error('Incorrect number of input arguments');
elseif nargin==0
    n=100;
    m=100;
else
    n=varargin{1};
    m=varargin{2};
end
% nargout=4; %for debugging
if nargout>4 || nargout==0
    error('Incorrect number of output arguments');
end

%% Create all the UI objects so that they can be used in any functions in this GUI
hMainFigure     =   figure(...
                    'Units','characters',...
                    'MenuBar','none',...
                    'Toolbar','none',...
                    'Position',[1,1,168,29.85],...
                    'vis','off',...
                    'WindowStyle', 'modal',...
                    'WindowButtonDownFcn', @hMainFigureWindowButtonDownFcn,...
                    'WindowButtonUpFcn', @hMainFigureWindowButtonUpFcn,...
                    'WindowButtonMotionFcn', @hMainFigureWindowButtonMotionFcn);
%-------------------------------------------------------------------------
hIconEditAxes   =   axes(...
                    'Parent',hMainFigure,...
                    'vis','on',...
                    'Units','characters',...
                    'Position',[5.6 1.85 83 26.92]);
%-------------------------------------------------------------------------
hTypeOfObjectPanel= uibuttongroup(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'Title','Select a type of object',...
                    'Clipping','off',...                    
                    'Position',[93.4 10.5 31.6 18.15],...
                    'SelectionChangeFcn',@hTypeOfObjectPanelChanged);
hObstacleButton =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[2.4 14.08 5.6 1.92],...
                    'BackgroundColor',[0 0 0],...
                    'Style','togglebutton');
hObstacleText   =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[8.8 14.15 20.2 1.54],...
                    'Style','text',...
                    'String','ooo Obstacles oooo');
hLineButton     =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[2.4 11 5.6 1.92],...
                    'BackgroundColor',[1 0 0],...
                    'Style','togglebutton');
hLineText       =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[8.8 11 20.2 1.54],...
                    'Style','text',...
                    'String','-------- Lines --------');
hStartPointButton=  uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[2.4 7.92 5.6 1.92],...
                    'BackgroundColor',[0.5 1 0],...
                    'Style','togglebutton');
hStartPointText =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[8.8 7.85 20.2 1.54],...
                    'Style','text',...
                    'String','Start point');
hGoalPointButton=   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[2.4 4.85 5.6 1.92],...
                    'BackgroundColor',[1 1 0],...
                    'Style','togglebutton');
hGoalPointText  =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[8.8 4.69 20.2 1.54],...
                    'Style','text',...
                    'String','Goal point');                
hEraseButton     =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[2.4 1.39 5.6 1.92],...
                    'BackgroundColor',[1 1 1],...
                    'Style','togglebutton');
hEraseText      =   uicontrol(...
                    'Parent',hTypeOfObjectPanel,...
                    'Units','characters',...
                    'Position',[8.8 1.39 20.2 1.54],...
                    'Style','text',...
                    'String','xxxxx Erase xxxxx');
%-------------------------------------------------------------------------
hSizeOfBrush    =   uibuttongroup(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'Title','Select size for the brush',...
                    'Clipping','off',...                    
                    'Position',[93.4 5.46 71.4 4.69],...
                    'SelectionChangeFcn',@hSizeOfBrushChanged);
hLittleButton   =   uicontrol(...
                    'Parent',hSizeOfBrush,...
                    'Units','characters',...
                    'Position',[2.6 0.92 5.6 1.92],...
                    'BackgroundColor',[0.8 0.8 0.8],...
                    'Style','togglebutton');
hLittleText     =   uicontrol(...
                    'Parent',hSizeOfBrush,...
                    'Units','characters',...
                    'Position',[8.8 1.15 13.6 1.31],...
                    'Style','text',...
                    'FontSize',8.0,...
                    'String','little');
hMediumButton   =   uicontrol(...
                    'Parent',hSizeOfBrush,...
                    'Units','characters',...
                    'Position',[24.8 0.92 5.6 1.92],...
                    'BackgroundColor',[.52 0.52 0.52],...
                    'Style','togglebutton');
hMediumText  	=   uicontrol(...
                    'Parent',hSizeOfBrush,...
                    'Units','characters',...
                    'Position',[31.0 1.15 15.2 1.39],...
                    'Style','text',...
                    'FontSize',10.0,...
                    'String','Medium');
hLargeButton     =   uicontrol(...
                    'Parent',hSizeOfBrush,...
                    'Units','characters',...
                    'Position',[47.2 0.92 5.6 1.92],...
                    'BackgroundColor',[.38 .38 .38],...
                    'Style','togglebutton');
hLargeText      =   uicontrol(...
                    'Parent',hSizeOfBrush,...
                    'Units','characters',...
                    'Position',[53.8 1.15 15.6 1.62],...
                    'Style','text',...
                    'FontSize',12.0,...
                    'String','LARGE');
%-------------------------------------------------------------------------
hMapGeneratorPanel= uibuttongroup(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'Title','Map generator:',...
                    'Clipping','off',...                    
                    'Position',[130.4 10.46 34.4 18.15]);
hLoadMapButton  =   uicontrol(...
                    'Parent',hMapGeneratorPanel,...
                    'Units','characters',...
                    'Position',[2.8 14.08 5.6 1.92],...
                    'Callback',@hLoadMapCallback);
hLoadMapText    =   uicontrol(...
                    'Parent',hMapGeneratorPanel,...
                    'Units','characters',...
                    'Position',[9.2 14.31 22.8 1.39],...
                    'Style','text',...
                    'String','Load previous map');
hGenerateMapButton= uicontrol(...
                    'Parent',hMapGeneratorPanel,...
                    'Units','characters',...
                    'Position',[2.8 11.31 5.6 1.92],...
                    'Callback',@hGenerateMapCallback);
hGenerateMapText=   uicontrol(...
                    'Parent',hMapGeneratorPanel,...
                    'Units','characters',...
                    'Position',[9.2 11.54 23.2 1.39],...
                    'Style','text',...
                    'String','Generate random map');
hParametersPanel=  uibuttongroup(...
                    'Parent',hMapGeneratorPanel,...
                    'Units','characters',...
                    'Title','Parameters:',...
                    'Clipping','off',...                    
                    'Position',[2.8 0.77 28.8 9.15]);
hRatioText      =   uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[10.6 5.92 6.2 1.46],...
                    'Style','text',...
                    'String','Ratio:');
hRatioEditText  =   uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[18.4 6.08 8.4 1.69],...
                    'BackgroundColor',[1 1 1],...
                    'Style','edit',...
                    'String','0.4');
hSmoothnessText =   uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[4.2 3.77 13.2 1.31],...
                    'Style','text',...
                    'String','Smoothness:'); 
hSmoothnessEditText= uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[18.6 3.77 8.0 1.61],...
                    'BackgroundColor',[1 1 1],...
                    'Style','edit',...
                    'String','10');                
hSeedMap1Text    =   uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[2 1.85 15.4 1.31],...
                    'Style','text',...
                    'String','Use actual map');
hSeedMap2Text    =   uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[2 0.69 15.4 1.31],...
                    'Style','text',...
                    'String','as seed map:');
hSeedMapEditText =  uicontrol(...
                    'Parent',hParametersPanel,...
                    'Units','characters',...
                    'Position',[20.8 1.15 4 1.77],...
                    'Style','checkbox');                
%-------------------------------------------------------------------------                
hSectionLine    =   uipanel(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'HighlightColor',[.50 .50 .50],...
                    'BorderType','line',...
                    'Title','',...
                    'Clipping','on',...
                    'Position',[90.6 4.69 76.6 0.077]);
hOKButton       =   uicontrol(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'Position',[100 1.231 16.8 2.54],...
                    'String','OK',...
                    'Callback',@hOKButtonCallback);
hCancelButton   =   uicontrol(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'Position',[121.4 1.231 16.8 2.54],...
                    'String','Cancel',...
                    'Callback',@hCancelButtonCallback);
hSaveMapButton  =   uicontrol(...
                    'Parent',hMainFigure,...
                    'Units','characters',...
                    'Position',[143 1.231 16.8 2.54],...
                    'String','Save Map',...
                    'Callback',@hSaveMapButtonCallback);
%------------------------------------------------------------------

%% Declare non-UI data here so that they can be used in any functions
mIsEditingMap=false;
mIsMotionOn=false;
brushSize=ceil(n/100);
objectColor=1;
corr=ones(2);
objectsMap=zeros(n,m);
pointsMap=zeros(n,m);
startPoint=[];
colormap([1 1 1;0 0 0;1 0 0;0.5 1 0;0.5 1 0;0.5 1 0;1 1 0]);

image(objectsMap+1);

if nargout<4
    set(hGoalPointButton,'Enable','off');
end
if nargout<3
    set(hStartPointButton,'Enable','off');
end
if nargout==1
    set(hLineButton,'Enable','off');
end

% Make changes needed for proper look and feel and running on different
% platforms 
prepareLayout(hMainFigure);

% Make the GUI on screen
set(hIconEditAxes,'drawmode','fast');
movegui(hMainFigure,'center');
set(hMainFigure,'visible', 'on');

% Make the GUI blocking
uiwait(hMainFigure);

% Return the edited maps if it is requested
if nargout==1
    varargout{1,1}=objectsMap;
else
    varargout{2}=objectsMap>1.9;
    varargout{1}=objectsMap-varargout{2}*2;
end
% Return the start point & goal points if it is requested
if nargout==3
    varargout{3}=startPoint;
elseif nargout==4
    if isempty(pointsMap)
        varargout{4}=[];
    else
        [goalList(:,1),goalList(:,2)]=find(pointsMap>4);
        varargout{4}=goalList;
    end
end


%% FUNCTIONS for EDITING THE MAP
    %------------------------------------------------------------------
    function hTypeOfObjectPanelChanged(hObject,eventdata)
        if  get(hObstacleButton,'value')==1
            objectColor=1;
        elseif get(hLineButton,'value')==1
            objectColor=2;
        elseif get(hStartPointButton,'value')==1
            objectColor=3;
        elseif get(hGoalPointButton,'value')==1
            objectColor=6;
        else
            objectColor=0;
        end
        if objectColor>=3
            set(hLittleButton,'Value',1);
            set(hMediumButton,'Enable','off');
            set(hLargeButton,'Enable','off');
        else
            set(hMediumButton,'Enable','on');
            set(hLargeButton,'Enable','on');
        end
    end
    %------------------------------------------------------------------
    function hSizeOfBrushChanged(hObject,eventdata)
        if  get(hLittleButton,'value')==1
            brushSize=ceil(n/100);
        elseif get(hMediumButton,'value')==1
            brushSize=ceil(n/50);
        else
            brushSize=ceil(n/20);
        end        
    end
    %------------------------------------------------------------------
    function hMainFigureWindowButtonDownFcn(hObject, eventdata)
    % Callback called when mouse is pressed on the figure. Used to change
    % the color of the specific point under the mouse to that of
    % the currently selected object: obstacle or line
        if (ancestor(gco,'axes') == hIconEditAxes)
            mIsEditingMap = true;
        
            localEdit();
        end
    end

    %------------------------------------------------------------------
    function hMainFigureWindowButtonUpFcn(hObject, eventdata)
    % Callback called when mouse is release to exit the editing mode
        mIsEditingMap = false;
        mIsMotionOn=false;
    end

    %------------------------------------------------------------------
    function hMainFigureWindowButtonMotionFcn(hObject, eventdata)
    % Callback called when mouse is moving so that icon color data can be
    % updated in the editing mode
        if mIsEditingMap
            mIsMotionOn=true;
            localEdit();
        end
    end

    %------------------------------------------------------------------
    function localEdit()
    % helper function that changes the color of the plot to that
    % corresponing to the selected object: obstacle or line
        pt = get(hIconEditAxes,'currentpoint');
        x = round(pt(1,2));
        y = round(pt(1,1));

        if x>0 && y>0 && x<=n && y<=m
            corr=ones(2)*brushSize;
            if x<=brushSize
                corr(1,1)=x-1;
            elseif x>n-brushSize
                corr(1,2)=n-x;
            end
            if y<=brushSize
                corr(2,1)=y-1;
            elseif y>m-brushSize
                corr(2,2)=m-y;
            end
            
            if objectColor<3
                objectsMap(x-corr(1,1):x+corr(1,2),y-corr(2,1):y+corr(2,2))=ones*objectColor;
                if objectColor==0
                    pointsMap(x-corr(1,1):x+corr(1,2),y-corr(2,1):y+corr(2,2))=ones*objectColor;
                end
            elseif objectColor==3
                if isempty(startPoint)==0
                    pointsMap(startPoint(1),startPoint(2))=0;
                end
                startPoint=[x,y];
                pointsMap(x,y)=objectColor;
            else
                if mIsMotionOn==0;
                    pointsMap(x,y)=objectColor;
                end
            end
            
            image(objectsMap+pointsMap+1);
        end
    end

%% LOAD & GENERATE MAP BUTTONS
    %------------------------------------------------------------------
    function hLoadMapCallback(hobject,eventdata)
        file = uigetfile('*.txt','Select the map');
        if ~isequal(file, 0)
            objectsMap=load(file);         
            image(objectsMap+1);
            % Resize all the variables
            [m,n]=size(objectsMap);
            pointsMap=zeros(m,n);
            startPoint=[];
            set(hLittleButton,'value',1);
            brushSize=ceil(n/100);
        else
            return
        end
    end

 %------------------------------------------------------------------
    function hGenerateMapCallback(hobject,eventdata)
        r=str2num(get(hRatioEditText,'string'));
        D=str2num(get(hSmoothnessEditText,'string'));
        if get(hSeedMapEditText,'value')==1
            seed_map=objectsMap;
            objectsMap=fcn_generate_random_occupancy(n,m,r,D,seed_map);
        else
            objectsMap=fcn_generate_random_occupancy(n,m,r,D);
        end
        objectsMap=double(objectsMap);
        image(objectsMap+1)
        pointsMap=zeros(m,n);
        startPoint=[];
    end

%% OK & CANCEL BUTTONS - SAVE MATRIXS
    %------------------------------------------------------------------
    function hOKButtonCallback(hObject, eventdata)
    % Callback called when the OK button is pressed
        uiresume;
        delete(hMainFigure);
    end

    %------------------------------------------------------------------
    function hCancelButtonCallback(hObject, eventdata)
    % Callback called when the Cancel button is pressed
        objectsMap=[];
        startPoint=[];
        pointsMap=[];
        uiresume;
        delete(hMainFigure);
    end

    function hSaveMapButtonCallback(hObject, eventdata)
    % Callback to save a matrix in a txt    
        [FileName,PathName] = uiputfile('Objects map.txt','File name');
        if ~isequal(FileName, 0)
            fid=fopen(strcat(PathName,FileName),'w');
            for i = 1:n
                for j = 1:m
                    fprintf(fid,'%d ',objectsMap(i,j));
                end
                fprintf(fid,'\r\n');
            end
            fclose(fid);
        end
    end

end

%% Prepare Layout
function prepareLayout(topContainer)
% This is a utility function that takes care of issues related to
% look&feel and running across multiple platforms. You can reuse
% this function in other GUIs or modify it to fit your needs.
    allObjects = findall(topContainer);
    warning off  %Temporary presentation fix
    try
        titles=get(allObjects(isprop(allObjects,'TitleHandle')), 'TitleHandle');
        allObjects(ismember(allObjects,[titles{:}])) = [];
    catch
    end
    warning on

    % Use the name of this GUI file as the title of the figure
    defaultColor = get(0, 'defaultuicontrolbackgroundcolor');
    if isa(handle(topContainer),'figure')
        set(topContainer,'Name', mfilename, 'NumberTitle','off');
        % Make figure color matches that of GUI objects
        set(topContainer, 'Color',defaultColor);
    end

    % Make GUI objects available to callbacks so that they cannot
    % be changes accidentally by other MATLAB commands
    set(allObjects(isprop(allObjects,'HandleVisibility')), 'HandleVisibility', 'Callback');

    % Make the GUI run properly across multiple platforms by using
    % the proper units
    if strcmpi(get(topContainer, 'Resize'),'on')
        set(allObjects(isprop(allObjects,'Units')),'Units','Normalized');
    else
        set(allObjects(isprop(allObjects,'Units')),'Units','Characters');
    end

end
